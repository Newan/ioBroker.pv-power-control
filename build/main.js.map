{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from '@iobroker/adapter-core';\r\n\r\nclass PvPowerConrol extends utils.Adapter {\r\n\r\n    private watchdogInterval!: ioBroker.Interval ; //Intervall f\u00FCr Abfrage des Smatmeters und steuern der Wallbox\r\n    private startTimer!: ioBroker.Timeout; //Timer f\u00FCr Start der PV Ladung\r\n    private stopTimer!: ioBroker.Timeout; //Timer f\u00FCr Stop der PV Ladung\r\n    private gridFactor = 1; //Smatmeter factor zum umrechenen\r\n    private currentPower = 0; //Strom einspeisung oder bezug?\r\n    private isPluged = false; //Auto angeschlossen?\r\n    private vehicleSoc = 0; //Ladesatnd des Autos\r\n    private stepAmpereWallbox = 1; //Mindestampere f\u00FCr eine Ampere hochschalten an der Wallbox\r\n    private wallboxAmpere = 0; //Aktuelle Ampereleistung Wallbox\r\n    private wallboxEnable = false; //Aktuellen Wallboxstatus\r\n    private minWallboxAmpere = 2 // Mindestampere zum Laden;\r\n    private maxWallboxAmpere = 32 // MaximalAmpere f\u00FCr Wallbox\r\n    private mode ='stop' // stop = Keine Ladung erfolgt, start=warten auf start, pv = Sind m PV Lademodus\r\n\r\n    private stopTime = 5000; //Timer bis Laden beendet wird\r\n    private startTime = 15000; //Timer bis LAden gestartet wird\r\n    private intervalTime = 10000; //Intervall wie h\u00E4ufig der LAdestrom angepasst wird\r\n\r\n    private runStopTimer = false;\r\n    private runStartTimer = false;\r\n\r\n\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: 'pv-power-control',\r\n        });\r\n        this.on('ready', this.onReady.bind(this));\r\n        this.on('stateChange', this.onStateChange.bind(this));\r\n        // this.on('objectChange', this.onObjectChange.bind(this));\r\n        // this.on('message', this.onMessage.bind(this));\r\n        this.on('unload', this.onUnload.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Is called when databases are connected and adapter received configuration.\r\n     */\r\n    private async onReady(): Promise<void> {\r\n        let tmpLoadError = false\r\n        /**Genreal */\r\n        if (this.config.intervall > 0) {\r\n            this.intervalTime = this.config.intervall;\r\n        } else {\r\n            this.log.error('Wrong intervall time');\r\n            tmpLoadError = true;\r\n        }\r\n\r\n        if (this.config.start_time > 0 && this.config.start_time < 3600) {\r\n            this.startTime = this.config.start_time;\r\n        } else {\r\n            this.log.error('Wrong starttimer time: ' + this.config.start_time.toString());\r\n            tmpLoadError = true;\r\n        }\r\n\r\n        if (this.config.stop_time > 0 && this.config.stop_time < 3600) {\r\n            this.stopTime = this.config.stop_time;\r\n        } else {\r\n            this.log.error('Wrong stoptimer time: ' + this.config.stop_time.toString());\r\n            tmpLoadError = true;\r\n        }\r\n\r\n        /** Grid */\r\n        if (this.config.grid_factor != 0) {\r\n            this.gridFactor = this.config.grid_factor;\r\n        } else {\r\n            this.log.error('Wrong grid factor:' + this.config.grid_factor.toString());\r\n            tmpLoadError = true;\r\n        }\r\n\r\n        if (this.config.grid_id != '') {\r\n            this.subscribeForeignStatesAsync(this.config.grid_id);\r\n        } else {\r\n            this.log.error('Wrong grid id - no Samrtmeter found');\r\n            tmpLoadError = true;\r\n        }\r\n\r\n        /** Wallbox */\r\n        //Pr\u00FCfen ob wir Wallboxstatus haben\r\n        if (this.config.wallbox_enable_id != '') {\r\n            //Subscribe f\u00FCr \u00C4nderungen\r\n            this.subscribeForeignStatesAsync(this.config.wallbox_enable_id);\r\n            //holen den aktuellen status\r\n            const tmpState = await this.getStateAsync(this.config.wallbox_enable_id);\r\n            this.wallboxEnable = tmpState?.val ? true : false;\r\n        } else {\r\n            this.log.error('Wrong wallbox status id - no boolean found');\r\n            tmpLoadError = true;\r\n        }\r\n\r\n        //Pr\u00FCfen ob wir Wallbox ampere haben\r\n        if (this.config.wallbox_ampere_id != '') {\r\n            //Subscribe f\u00FCr \u00C4nderungen\r\n            this.subscribeForeignStatesAsync(this.config.wallbox_ampere_id);\r\n            //holen den aktuellen status\r\n            const tmpState = await this.getForeignStateAsync(this.config.wallbox_ampere_id);\r\n            this.wallboxAmpere = Number(tmpState?.val);\r\n        } else {\r\n            this.log.error('Wrong wallbox ampere id - no number found');\r\n            tmpLoadError = true;\r\n        }\r\n\r\n        if (this.config.wallbox_ampere_step > 0) {\r\n            this.stepAmpereWallbox = this.config.wallbox_ampere_step;\r\n        } else {\r\n            this.log.error('Wrong wallbox ampere step:' + this.config.wallbox_ampere_step.toString());\r\n            tmpLoadError = true;\r\n        }\r\n\r\n        if (this.config.wallbox_ampere_max > 0) {\r\n            this.maxWallboxAmpere = this.config.wallbox_ampere_max;\r\n        } else {\r\n            this.log.error('Wrong wallbox max ampere :' + this.config.wallbox_ampere_max.toString());\r\n            tmpLoadError = true;\r\n        }\r\n\r\n        if (this.config.wallbox_ampere_min > 0) {\r\n            this.minWallboxAmpere = this.config.wallbox_ampere_min;\r\n        } else {\r\n            this.log.error('Wrong wallbox max ampere :' + this.config.wallbox_ampere_min.toString());\r\n            tmpLoadError = true;\r\n        }\r\n\r\n        /** Vehicle */\r\n        //Pr\u00FCfen ob wir Autosstatus haben\r\n        if (this.config.vehicle_pluged_id != '') {\r\n            //Subscribe f\u00FCr \u00C4nderungen\r\n            this.subscribeForeignStatesAsync(this.config.vehicle_pluged_id);\r\n            //holen den aktuellen status\r\n            const tmpState = await this.getForeignStateAsync(this.config.vehicle_pluged_id);\r\n            this.isPluged = tmpState?.val? true: false;\r\n        } else {\r\n            this.log.error('Wrong vehicle pluged id - no boolean found');\r\n            tmpLoadError = true;\r\n        }\r\n\r\n        if (this.config.vehicle_soc_id != '') {\r\n            //Subscribe f\u00FCr \u00C4nderungen\r\n            this.subscribeForeignStatesAsync(this.config.vehicle_soc_id);\r\n            //holen den aktuellen status\r\n            const tmpState = await this.getForeignStateAsync(this.config.vehicle_soc_id);\r\n            this.vehicleSoc = Number(tmpState?.val);\r\n        } else {\r\n            this.log.error('Wrong vehicle SoC id - no number found');\r\n            tmpLoadError = true;\r\n        }\r\n\r\n        if (!tmpLoadError) {\r\n            this.log.info('loading complete - all data present');\r\n\r\n            //Initial wallbox all to 0\r\n            await this.setWallboxStateAsync(this.config.wallbox_ampere_id, 0, true);\r\n            await this.setWallboxStateAsync(this.config.wallbox_enable_id, false, true);\r\n\r\n            //start watchdog\r\n            this.watchdogInterval = this.setInterval(async ()=> {\r\n                this.log.debug('Check Intervall tick');\r\n                await this.checkPvControl();\r\n            }, this.intervalTime * 1000);\r\n        } else {\r\n            this.log.info('loading incomplete - mising data');\r\n        }\r\n    }\r\n\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            clearTimeout(this.stopTimer);\r\n            clearTimeout(this.startTimer);\r\n\r\n            clearInterval(this.watchdogInterval);\r\n            callback();\r\n        } catch (e) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\r\n        if (state) {\r\n            switch(id) {\r\n                case this.config.grid_id:\r\n                    this.log.debug('New value for grid:' + state.val?.toString());\r\n                    await this.setGridValue(state.val)\r\n                    break;\r\n                case this.config.vehicle_pluged_id:\r\n                    this.log.debug('Vehicle pluged:' + state.val?.toString());\r\n                    this.isPluged = state.val ? true : false\r\n                    break;\r\n                case this.config.vehicle_soc_id:\r\n                    this.log.debug('Vehicle soc:' + state.val?.toString());\r\n                    this.vehicleSoc = state.val != null? +state.val : 0\r\n                    break;\r\n                case this.config.wallbox_ampere_id:\r\n                    this.log.debug('Wallbox ampere:' + state.val?.toString());\r\n                    this.wallboxAmpere = state.val != null? +state.val : 0\r\n                    break;\r\n                case this.config.wallbox_enable_id:\r\n                    this.log.debug('Wallbox enable:' + state.val?.toString());\r\n                    this.wallboxEnable = state.val ? true: false;\r\n                    break;\r\n                default:\r\n                    this.log.error('No supported event found');\r\n                    this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n            }\r\n        } else {\r\n            // The state was deleted\r\n            this.log.info(`state ${id} deleted`);\r\n        }\r\n    }\r\n\r\n    private async setGridValue(power: ioBroker.StateValue): Promise<void> {\r\n        if(power != null) {\r\n            this.currentPower = +power * this.gridFactor\r\n            this.setStateAsync('information.currentGridPower', this.currentPower, true);\r\n        } else {\r\n            this.currentPower = 0;\r\n        }\r\n\r\n        this.log.debug('currentPower:' + this.currentPower.toString());\r\n    }\r\n\r\n    private async setWallbox(ampere: number): Promise<void> {\r\n        //this.wallboxWatt = this.wallboxWatt + watt;\r\n        //this.wallboxAmpere = Math.floor(this.wallboxAmpere + ampere);\r\n        const tmpNewAmpere = this.wallboxAmpere + ampere;\r\n        this.log.debug('New value: ' + this.wallboxAmpere);\r\n\r\n        if (tmpNewAmpere >= this.minWallboxAmpere) {\r\n            if (tmpNewAmpere >= this.maxWallboxAmpere) {\r\n                this.log.debug('More power as the max Wallbox, set to maxAmpere from Wallbox');\r\n                await this.setWallboxStateAsync(this.config.wallbox_ampere_id, this.maxWallboxAmpere, true);\r\n                await this.setWallboxStateAsync(this.config.wallbox_enable_id, true, true);\r\n\r\n                this.wallboxAmpere = this.maxWallboxAmpere; // todo aufechte werte holen\r\n            } else {\r\n                this.log.debug('Set New Ampere to Wallbox: ' + tmpNewAmpere.toString());\r\n                await this.setWallboxStateAsync(this.config.wallbox_ampere_id, tmpNewAmpere, true);\r\n                await this.setWallboxStateAsync(this.config.wallbox_enable_id, true, true);\r\n\r\n                this.wallboxAmpere = tmpNewAmpere; // todo aufechte werte holen\r\n            }\r\n        } else {\r\n            // Haben zu wenig leistung, auf minumum gehen und stopTimer starten\r\n            if(this.wallboxAmpere != this.minWallboxAmpere) {\r\n                await this.setWallboxStateAsync(this.config.wallbox_ampere_id, this.minWallboxAmpere, true);\r\n                await this.setWallboxStateAsync(this.config.wallbox_enable_id, true, true);\r\n                this.wallboxAmpere = this.minWallboxAmpere; // todo aufechte werte holen\r\n            }\r\n            //stop all after timer\r\n            this.checkStopTimer();\r\n        }\r\n    }\r\n\r\n    private async checkPvControl():Promise<void> {\r\n        //Pr\u00FCfen ob das Auto bereit ist\r\n        if(this.isPluged && this.vehicleSoc < 100) {\r\n            this.log.debug('vehicle ready check PV Power');\r\n\r\n\r\n            //Sind wir im PV Modus?\r\n            if (this.mode == 'PV') {\r\n                //PV Modus - Laden das Auto dynamisch\r\n                //this.log.warn(((this.getAmpereFromWatt(this.currentPower)/this.stepAmpereWallbox) * this.stepAmpereWallbox).toString());\r\n                //this.log.warn((Math.floor(this.getAmpereFromWatt(this.currentPower)/this.stepAmpereWallbox) * this.stepAmpereWallbox).toString());\r\n                const tmpWallboxAmpere = Math.floor(this.getAmpereFromWatt(this.currentPower)/this.stepAmpereWallbox) * this.stepAmpereWallbox;\r\n\r\n                if(this.getAmpereFromWatt(this.currentPower) > this.stepAmpereWallbox) {\r\n                    // Haben gen\u00FCgend Energie f\u00FCr eine Wallboxstep\r\n                    this.log.debug('Have enough power - set Wallbox : ' + tmpWallboxAmpere.toString());\r\n                    await this.setWallbox(tmpWallboxAmpere);\r\n                } else {\r\n                    // leider nicht gen\u00FCgend f\u00FCr ein Step - aber ist Netzbezug schon?\r\n                    if(this.currentPower < 0) {\r\n                        //Setze Wallbox niedriger\r\n                        this.log.debug('Have not enough power - set Wallbox down: ' + tmpWallboxAmpere.toString());\r\n                        await this.setWallbox(tmpWallboxAmpere);\r\n                    } else {\r\n                        // Kein Netzbezug, k\u00F6nnen so laufen lassen\r\n                        this.log.debug('Have not enough power to increase wallbox');\r\n                    }\r\n                }\r\n            } else {\r\n                // Laden noch nicht - sind im Timer?\r\n                if(this.getAmpereFromWatt(this.currentPower) > this.minWallboxAmpere) {\r\n                    // Haben gen\u00FCgend Energie f\u00FCr eine Wallboxstep\r\n                    this.log.debug('Have enough power to start');\r\n                    this.checkStartTimer();\r\n                } else {\r\n                    // nicht gen\u00FCgend Energie, also wieder aus\r\n                    this.log.debug('Have not enough power');\r\n                    if (this.mode != 'stop') {\r\n                        this.checkStopTimer();\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.log.debug('vehicle not ready or full charged - stop all');\r\n            if(this.mode== 'PV') {\r\n                await this.stopPV();\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkStartTimer(): void{\r\n        this.log.debug('check Start timer is ready');\r\n        if (this.runStopTimer) {\r\n            this.log.info('Stop Stoptimer - enough power');\r\n            clearTimeout(this.stopTimer)\r\n            this.runStopTimer = false ;\r\n        }\r\n        if(!this.runStartTimer) {\r\n            this.log.info('Start Starttimer - enough power');\r\n            this.startTimer = this.setTimeout(async () => {\r\n                this.log.debug('Start timer finished');\r\n                await this.startPV()\r\n                this.runStartTimer = false;\r\n            }, this.startTime);\r\n            this.runStartTimer = true;\r\n        }\r\n    }\r\n\r\n    private checkStopTimer(): void{\r\n        this.log.debug('check Stop timer is ready');\r\n        if (this.runStartTimer) {\r\n            this.log.info('Stop Starttimer - not enough power');\r\n            clearTimeout(this.startTimer)\r\n            this.runStartTimer = false;\r\n        }\r\n\r\n        if(!this.runStopTimer) {\r\n            this.log.info('Start Stoptimer - not enough power');\r\n            this.stopTimer = this.setTimeout(async () => {\r\n                this.log.debug('Stop timer finished');\r\n                await this.stopPV()\r\n                this.runStopTimer = false;\r\n            }, this.stopTime);\r\n            this.runStopTimer = true;\r\n        }\r\n    }\r\n\r\n    private async startPV(): Promise<void> {\r\n        await this.setMode('PV');\r\n    }\r\n\r\n    private async stopPV(): Promise<void> {\r\n        await this.setMode('stop');\r\n        // Stoppen Wallbox\r\n        await this.setWallboxStateAsync(this.config.wallbox_ampere_id, 0, true);\r\n        await this.setWallboxStateAsync(this.config.wallbox_enable_id, false, true);\r\n        this.wallboxAmpere = 0; // todo aufechte werte holen\r\n    }\r\n\r\n    private async setMode(mode: string): Promise<void> {\r\n        this.mode = mode;\r\n        await this.setStateAsync('information.mode', mode, true);\r\n    }\r\n\r\n    private getAmpereFromWatt(watt: number): number{\r\n        return watt/230;\r\n    }\r\n\r\n    private getWattFromAmpere(ampere: number): number {\r\n        return ampere * 230;\r\n    }\r\n\r\n    private async setWallboxStateAsync(id: string, value: string | boolean | number, ack = true): Promise<void> {\r\n\r\n        await this.setForeignStateAsync(id, value, ack);\r\n    }\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new PvPowerConrol(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new PvPowerConrol())();\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAuB;AAEvB,MAAM,sBAAsB,MAAM,QAAQ;AAAA,EAwB/B,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM,iCACC,UADD;AAAA,MAEF,MAAM;AAAA,IACV,EAAC;AAvBG,sBAAa;AACb,wBAAe;AACf,oBAAW;AACX,sBAAa;AACb,6BAAoB;AACpB,yBAAgB;AAChB,yBAAgB;AAChB,4BAAmB;AACnB,4BAAmB;AACnB,gBAAM;AAEN,oBAAW;AACX,qBAAY;AACZ,wBAAe;AAEf,wBAAe;AACf,yBAAgB;AAQpB,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,QAKc,UAAyB;AACnC,QAAI,eAAe;AAEnB,QAAI,KAAK,OAAO,YAAY,GAAG;AAC3B,WAAK,eAAe,KAAK,OAAO;AAAA,IACpC,OAAO;AACH,WAAK,IAAI,MAAM,sBAAsB;AACrC,qBAAe;AAAA,IACnB;AAEA,QAAI,KAAK,OAAO,aAAa,KAAK,KAAK,OAAO,aAAa,MAAM;AAC7D,WAAK,YAAY,KAAK,OAAO;AAAA,IACjC,OAAO;AACH,WAAK,IAAI,MAAM,4BAA4B,KAAK,OAAO,WAAW,SAAS,CAAC;AAC5E,qBAAe;AAAA,IACnB;AAEA,QAAI,KAAK,OAAO,YAAY,KAAK,KAAK,OAAO,YAAY,MAAM;AAC3D,WAAK,WAAW,KAAK,OAAO;AAAA,IAChC,OAAO;AACH,WAAK,IAAI,MAAM,2BAA2B,KAAK,OAAO,UAAU,SAAS,CAAC;AAC1E,qBAAe;AAAA,IACnB;AAGA,QAAI,KAAK,OAAO,eAAe,GAAG;AAC9B,WAAK,aAAa,KAAK,OAAO;AAAA,IAClC,OAAO;AACH,WAAK,IAAI,MAAM,uBAAuB,KAAK,OAAO,YAAY,SAAS,CAAC;AACxE,qBAAe;AAAA,IACnB;AAEA,QAAI,KAAK,OAAO,WAAW,IAAI;AAC3B,WAAK,4BAA4B,KAAK,OAAO,OAAO;AAAA,IACxD,OAAO;AACH,WAAK,IAAI,MAAM,qCAAqC;AACpD,qBAAe;AAAA,IACnB;AAIA,QAAI,KAAK,OAAO,qBAAqB,IAAI;AAErC,WAAK,4BAA4B,KAAK,OAAO,iBAAiB;AAE9D,YAAM,WAAW,MAAM,KAAK,cAAc,KAAK,OAAO,iBAAiB;AACvE,WAAK,gBAAgB,sCAAU,OAAM,OAAO;AAAA,IAChD,OAAO;AACH,WAAK,IAAI,MAAM,4CAA4C;AAC3D,qBAAe;AAAA,IACnB;AAGA,QAAI,KAAK,OAAO,qBAAqB,IAAI;AAErC,WAAK,4BAA4B,KAAK,OAAO,iBAAiB;AAE9D,YAAM,WAAW,MAAM,KAAK,qBAAqB,KAAK,OAAO,iBAAiB;AAC9E,WAAK,gBAAgB,OAAO,qCAAU,GAAG;AAAA,IAC7C,OAAO;AACH,WAAK,IAAI,MAAM,2CAA2C;AAC1D,qBAAe;AAAA,IACnB;AAEA,QAAI,KAAK,OAAO,sBAAsB,GAAG;AACrC,WAAK,oBAAoB,KAAK,OAAO;AAAA,IACzC,OAAO;AACH,WAAK,IAAI,MAAM,+BAA+B,KAAK,OAAO,oBAAoB,SAAS,CAAC;AACxF,qBAAe;AAAA,IACnB;AAEA,QAAI,KAAK,OAAO,qBAAqB,GAAG;AACpC,WAAK,mBAAmB,KAAK,OAAO;AAAA,IACxC,OAAO;AACH,WAAK,IAAI,MAAM,+BAA+B,KAAK,OAAO,mBAAmB,SAAS,CAAC;AACvF,qBAAe;AAAA,IACnB;AAEA,QAAI,KAAK,OAAO,qBAAqB,GAAG;AACpC,WAAK,mBAAmB,KAAK,OAAO;AAAA,IACxC,OAAO;AACH,WAAK,IAAI,MAAM,+BAA+B,KAAK,OAAO,mBAAmB,SAAS,CAAC;AACvF,qBAAe;AAAA,IACnB;AAIA,QAAI,KAAK,OAAO,qBAAqB,IAAI;AAErC,WAAK,4BAA4B,KAAK,OAAO,iBAAiB;AAE9D,YAAM,WAAW,MAAM,KAAK,qBAAqB,KAAK,OAAO,iBAAiB;AAC9E,WAAK,WAAW,sCAAU,OAAK,OAAM;AAAA,IACzC,OAAO;AACH,WAAK,IAAI,MAAM,4CAA4C;AAC3D,qBAAe;AAAA,IACnB;AAEA,QAAI,KAAK,OAAO,kBAAkB,IAAI;AAElC,WAAK,4BAA4B,KAAK,OAAO,cAAc;AAE3D,YAAM,WAAW,MAAM,KAAK,qBAAqB,KAAK,OAAO,cAAc;AAC3E,WAAK,aAAa,OAAO,qCAAU,GAAG;AAAA,IAC1C,OAAO;AACH,WAAK,IAAI,MAAM,wCAAwC;AACvD,qBAAe;AAAA,IACnB;AAEA,QAAI,CAAC,cAAc;AACf,WAAK,IAAI,KAAK,qCAAqC;AAGnD,YAAM,KAAK,qBAAqB,KAAK,OAAO,mBAAmB,GAAG,IAAI;AACtE,YAAM,KAAK,qBAAqB,KAAK,OAAO,mBAAmB,OAAO,IAAI;AAG1E,WAAK,mBAAmB,KAAK,YAAY,YAAW;AAChD,aAAK,IAAI,MAAM,sBAAsB;AACrC,cAAM,KAAK,eAAe;AAAA,MAC9B,GAAG,KAAK,eAAe,GAAI;AAAA,IAC/B,OAAO;AACH,WAAK,IAAI,KAAK,kCAAkC;AAAA,IACpD;AAAA,EACJ;AAAA,EAEQ,SAAS,UAA4B;AACzC,QAAI;AACA,mBAAa,KAAK,SAAS;AAC3B,mBAAa,KAAK,UAAU;AAE5B,oBAAc,KAAK,gBAAgB;AACnC,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,QAEc,cAAc,IAAY,OAAyD;AAnLrG;AAoLQ,QAAI,OAAO;AACP,cAAO;AAAA,aACE,KAAK,OAAO;AACb,eAAK,IAAI,MAAM,wBAAwB,aAAM,QAAN,mBAAW,WAAU;AAC5D,gBAAM,KAAK,aAAa,MAAM,GAAG;AACjC;AAAA,aACC,KAAK,OAAO;AACb,eAAK,IAAI,MAAM,oBAAoB,aAAM,QAAN,mBAAW,WAAU;AACxD,eAAK,WAAW,MAAM,MAAM,OAAO;AACnC;AAAA,aACC,KAAK,OAAO;AACb,eAAK,IAAI,MAAM,iBAAiB,aAAM,QAAN,mBAAW,WAAU;AACrD,eAAK,aAAa,MAAM,OAAO,OAAM,CAAC,MAAM,MAAM;AAClD;AAAA,aACC,KAAK,OAAO;AACb,eAAK,IAAI,MAAM,oBAAoB,aAAM,QAAN,mBAAW,WAAU;AACxD,eAAK,gBAAgB,MAAM,OAAO,OAAM,CAAC,MAAM,MAAM;AACrD;AAAA,aACC,KAAK,OAAO;AACb,eAAK,IAAI,MAAM,oBAAoB,aAAM,QAAN,mBAAW,WAAU;AACxD,eAAK,gBAAgB,MAAM,MAAM,OAAM;AACvC;AAAA;AAEA,eAAK,IAAI,MAAM,0BAA0B;AACzC,eAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA;AAAA,IAElF,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AAAA,QAEc,aAAa,OAA2C;AAClE,QAAG,SAAS,MAAM;AACd,WAAK,eAAe,CAAC,QAAQ,KAAK;AAClC,WAAK,cAAc,gCAAgC,KAAK,cAAc,IAAI;AAAA,IAC9E,OAAO;AACH,WAAK,eAAe;AAAA,IACxB;AAEA,SAAK,IAAI,MAAM,kBAAkB,KAAK,aAAa,SAAS,CAAC;AAAA,EACjE;AAAA,QAEc,WAAW,QAA+B;AAGpD,UAAM,eAAe,KAAK,gBAAgB;AAC1C,SAAK,IAAI,MAAM,gBAAgB,KAAK,aAAa;AAEjD,QAAI,gBAAgB,KAAK,kBAAkB;AACvC,UAAI,gBAAgB,KAAK,kBAAkB;AACvC,aAAK,IAAI,MAAM,8DAA8D;AAC7E,cAAM,KAAK,qBAAqB,KAAK,OAAO,mBAAmB,KAAK,kBAAkB,IAAI;AAC1F,cAAM,KAAK,qBAAqB,KAAK,OAAO,mBAAmB,MAAM,IAAI;AAEzE,aAAK,gBAAgB,KAAK;AAAA,MAC9B,OAAO;AACH,aAAK,IAAI,MAAM,gCAAgC,aAAa,SAAS,CAAC;AACtE,cAAM,KAAK,qBAAqB,KAAK,OAAO,mBAAmB,cAAc,IAAI;AACjF,cAAM,KAAK,qBAAqB,KAAK,OAAO,mBAAmB,MAAM,IAAI;AAEzE,aAAK,gBAAgB;AAAA,MACzB;AAAA,IACJ,OAAO;AAEH,UAAG,KAAK,iBAAiB,KAAK,kBAAkB;AAC5C,cAAM,KAAK,qBAAqB,KAAK,OAAO,mBAAmB,KAAK,kBAAkB,IAAI;AAC1F,cAAM,KAAK,qBAAqB,KAAK,OAAO,mBAAmB,MAAM,IAAI;AACzE,aAAK,gBAAgB,KAAK;AAAA,MAC9B;AAEA,WAAK,eAAe;AAAA,IACxB;AAAA,EACJ;AAAA,QAEc,iBAA+B;AAEzC,QAAG,KAAK,YAAY,KAAK,aAAa,KAAK;AACvC,WAAK,IAAI,MAAM,8BAA8B;AAI7C,UAAI,KAAK,QAAQ,MAAM;AAInB,cAAM,mBAAmB,KAAK,MAAM,KAAK,kBAAkB,KAAK,YAAY,IAAE,KAAK,iBAAiB,IAAI,KAAK;AAE7G,YAAG,KAAK,kBAAkB,KAAK,YAAY,IAAI,KAAK,mBAAmB;AAEnE,eAAK,IAAI,MAAM,uCAAuC,iBAAiB,SAAS,CAAC;AACjF,gBAAM,KAAK,WAAW,gBAAgB;AAAA,QAC1C,OAAO;AAEH,cAAG,KAAK,eAAe,GAAG;AAEtB,iBAAK,IAAI,MAAM,+CAA+C,iBAAiB,SAAS,CAAC;AACzF,kBAAM,KAAK,WAAW,gBAAgB;AAAA,UAC1C,OAAO;AAEH,iBAAK,IAAI,MAAM,2CAA2C;AAAA,UAC9D;AAAA,QACJ;AAAA,MACJ,OAAO;AAEH,YAAG,KAAK,kBAAkB,KAAK,YAAY,IAAI,KAAK,kBAAkB;AAElE,eAAK,IAAI,MAAM,4BAA4B;AAC3C,eAAK,gBAAgB;AAAA,QACzB,OAAO;AAEH,eAAK,IAAI,MAAM,uBAAuB;AACtC,cAAI,KAAK,QAAQ,QAAQ;AACrB,iBAAK,eAAe;AAAA,UACxB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OAAO;AACH,WAAK,IAAI,MAAM,8CAA8C;AAC7D,UAAG,KAAK,QAAO,MAAM;AACjB,cAAM,KAAK,OAAO;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,kBAAuB;AAC3B,SAAK,IAAI,MAAM,4BAA4B;AAC3C,QAAI,KAAK,cAAc;AACnB,WAAK,IAAI,KAAK,+BAA+B;AAC7C,mBAAa,KAAK,SAAS;AAC3B,WAAK,eAAe;AAAA,IACxB;AACA,QAAG,CAAC,KAAK,eAAe;AACpB,WAAK,IAAI,KAAK,iCAAiC;AAC/C,WAAK,aAAa,KAAK,WAAW,YAAY;AAC1C,aAAK,IAAI,MAAM,sBAAsB;AACrC,cAAM,KAAK,QAAQ;AACnB,aAAK,gBAAgB;AAAA,MACzB,GAAG,KAAK,SAAS;AACjB,WAAK,gBAAgB;AAAA,IACzB;AAAA,EACJ;AAAA,EAEQ,iBAAsB;AAC1B,SAAK,IAAI,MAAM,2BAA2B;AAC1C,QAAI,KAAK,eAAe;AACpB,WAAK,IAAI,KAAK,oCAAoC;AAClD,mBAAa,KAAK,UAAU;AAC5B,WAAK,gBAAgB;AAAA,IACzB;AAEA,QAAG,CAAC,KAAK,cAAc;AACnB,WAAK,IAAI,KAAK,oCAAoC;AAClD,WAAK,YAAY,KAAK,WAAW,YAAY;AACzC,aAAK,IAAI,MAAM,qBAAqB;AACpC,cAAM,KAAK,OAAO;AAClB,aAAK,eAAe;AAAA,MACxB,GAAG,KAAK,QAAQ;AAChB,WAAK,eAAe;AAAA,IACxB;AAAA,EACJ;AAAA,QAEc,UAAyB;AACnC,UAAM,KAAK,QAAQ,IAAI;AAAA,EAC3B;AAAA,QAEc,SAAwB;AAClC,UAAM,KAAK,QAAQ,MAAM;AAEzB,UAAM,KAAK,qBAAqB,KAAK,OAAO,mBAAmB,GAAG,IAAI;AACtE,UAAM,KAAK,qBAAqB,KAAK,OAAO,mBAAmB,OAAO,IAAI;AAC1E,SAAK,gBAAgB;AAAA,EACzB;AAAA,QAEc,QAAQ,MAA6B;AAC/C,SAAK,OAAO;AACZ,UAAM,KAAK,cAAc,oBAAoB,MAAM,IAAI;AAAA,EAC3D;AAAA,EAEQ,kBAAkB,MAAqB;AAC3C,WAAO,OAAK;AAAA,EAChB;AAAA,EAEQ,kBAAkB,QAAwB;AAC9C,WAAO,SAAS;AAAA,EACpB;AAAA,QAEc,qBAAqB,IAAY,OAAkC,MAAM,MAAqB;AAExG,UAAM,KAAK,qBAAqB,IAAI,OAAO,GAAG;AAAA,EAClD;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,cAAc,OAAO;AACtG,OAAO;AAEH,EAAC,OAAM,IAAI,cAAc,GAAG;AAChC;",
  "names": []
}
