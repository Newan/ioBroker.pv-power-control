{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from '@iobroker/adapter-core';\r\n\r\nclass PvPowerConrol extends utils.Adapter {\r\n\r\n    private watchdogInterval!: ioBroker.Interval ; //Intervall f\u00FCr Abfrage des Smatmeters und steuern der Wallbox\r\n    private startTimer!: ioBroker.Timeout; //Timer f\u00FCr Start der PV Ladung\r\n    private stopTimer!: ioBroker.Timeout; //Timer f\u00FCr Stop der PV Ladung\r\n    private powerFactor = 1; //Smatmeter factor zum umrechenen\r\n    private currentPower = 0; //Strom einspeisung oder bezug?\r\n    private isPluged = false; //Auto angeschlossen?\r\n    private vehicleSoc = 0; //Ladesatnd des Autos\r\n    private stepAmpereWallbox = 1; //Mindestampere f\u00FCr eine Ampere hochschalten an der Wallbox\r\n    private wallboxAmpere = 0; //Aktuelle Ampereleistung Wallbox\r\n    private wallboxWatt = 0; //Aktuelle Wattleistung Wallbox\r\n    private minWallboxAmpere = 2 // Mindestampere zum Laden;\r\n    private maxWallboxAmpere = 32 // MaximalAmpere f\u00FCr Wallbox\r\n    private mode ='stop' // stop = Keine Ladung erfolgt, start=warten auf start, pv = Sind m PV Lademodus\r\n\r\n    private stopTime = 5000; //Timer bis Laden beendet wird\r\n    private startTime = 15000; //Timer bis LAden gestartet wird\r\n    private intervalTime = 10000; //Intervall wie h\u00E4ufig der LAdestrom angepasst wird\r\n\r\n    private runStopTimer = false;\r\n    private runStartTimer = false;\r\n\r\n\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: 'pv-power-control',\r\n        });\r\n        this.on('ready', this.onReady.bind(this));\r\n        this.on('stateChange', this.onStateChange.bind(this));\r\n        // this.on('objectChange', this.onObjectChange.bind(this));\r\n        // this.on('message', this.onMessage.bind(this));\r\n        this.on('unload', this.onUnload.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Is called when databases are connected and adapter received configuration.\r\n     */\r\n    private async onReady(): Promise<void> {\r\n        /** Grid */\r\n        //Pr\u00FCfen ob wir ein GRid/Smartmeter haben\r\n        this.subscribeForeignStatesAsync('0_userdata.0.grid');\r\n\r\n        /** Wallbox */\r\n        //Pr\u00FCfen ob wir Wallboxstatus haben\r\n        this.subscribeForeignStatesAsync('0_userdata.0.wallbox_enable');\r\n\r\n        //Pr\u00FCfen ob wir Wallboxampere haben\r\n        this.subscribeForeignStatesAsync('0_userdata.0.wallbox_power');\r\n\r\n        /** Vehicle */\r\n        //Pr\u00FCfen ob wir Autosstatus haben\r\n        this.getForeignStateAsync('0_userdata.0.vehicle_pluged').then( result => {\r\n            if (result != null) {\r\n                this.isPluged = Boolean(result);\r\n            } else {\r\n                this.isPluged = false;\r\n            }\r\n        })\r\n        this.subscribeForeignStatesAsync('0_userdata.0.vehicle_pluged');\r\n\r\n        //Pr\u00FCfen ob wir SOC des Autos haben\r\n        this.subscribeForeignStatesAsync('0_userdata.0.vehicle_soc');\r\n\r\n        /** Control Adapter */\r\n        //this.subscribeStates('mode_pv');\r\n        //this.subscribeStates('stop');\r\n        //this.subscribeStates('start_full');\r\n\r\n        //await this.setStateAsync('testVariable', true);\r\n\r\n        //Initial all to 0\r\n        this.setForeignStateAsync('0_userdata.0.wallbox_power', 0, true);\r\n        this.setForeignStateAsync('0_userdata.0.wallbox_ampere', 0, true);\r\n        this.setForeignStateAsync('0_userdata.0.wallbox_enable', false, true);\r\n\r\n        this.watchdogInterval = this.setInterval(()=> {\r\n            this.log.debug('Check Intervall tick');\r\n            this.checkPvControl();\r\n        }, this.intervalTime);\r\n    }\r\n\r\n    /**\r\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n     */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            clearTimeout(this.stopTimer);\r\n            clearTimeout(this.startTimer);\r\n\r\n            clearInterval(this.watchdogInterval);\r\n\r\n            callback();\r\n        } catch (e) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n        if (state) {\r\n            switch(id) {\r\n                case '0_userdata.0.grid':\r\n                    this.log.debug('New value for grid:' + state.val?.toString());\r\n                    this.setGridValue(state.val)\r\n                    break;\r\n                case '0_userdata.0.vehicle_pluged':\r\n                    this.log.debug('Vehicle pluged:' + state.val?.toString());\r\n                    this.isPluged = state.val ? true : false\r\n                    break;\r\n                case '0_userdata.0.vehicle_soc':\r\n                    this.log.debug('Vehicle soc:' + state.val?.toString());\r\n                    this.vehicleSoc = state.val != null? +state.val : 0\r\n                    break;\r\n                case '0_userdata.0.wallbox_power':\r\n                    this.log.debug('Wallbox power new:' + state.val?.toString());\r\n                    this.wallboxWatt = state.val != null? +state.val : 0\r\n                    break;\r\n                case '0_userdata.0.wallbox_ampere':\r\n                    this.log.debug('Wallbox ampere new:' + state.val?.toString());\r\n                    this.wallboxAmpere = state.val != null? +state.val : 0\r\n                    break;\r\n\r\n                default:\r\n                    this.log.error('No supported event found');\r\n                    this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n            }\r\n        } else {\r\n            // The state was deleted\r\n            this.log.info(`state ${id} deleted`);\r\n        }\r\n    }\r\n\r\n\r\n    private setGridValue(power: ioBroker.StateValue): void {\r\n        if(power != null) {\r\n            this.currentPower = +power * this.powerFactor\r\n        } else {\r\n            this.currentPower = 0;\r\n        }\r\n\r\n        this.log.debug('currentPower:' + this.currentPower.toString());\r\n    }\r\n\r\n    private setWallbox(ampere: number): void {\r\n        //this.wallboxWatt = this.wallboxWatt + watt;\r\n        //this.wallboxAmpere = Math.floor(this.wallboxAmpere + ampere);\r\n        const tmpNewAmpere = this.wallboxAmpere + ampere;\r\n        this.log.debug('New value: ' + this.wallboxAmpere);\r\n\r\n        if (tmpNewAmpere >= this.minWallboxAmpere) {\r\n            if (tmpNewAmpere >= this.maxWallboxAmpere) {\r\n                this.log.debug('More power as the max Wallbox, set to maxAmpere from Wallbox');\r\n                this.setForeignStateAsync('0_userdata.0.wallbox_power', this.getWattFromAmpere(this.maxWallboxAmpere), true);\r\n                this.setForeignStateAsync('0_userdata.0.wallbox_ampere', this.maxWallboxAmpere, true);\r\n                this.setForeignStateAsync('0_userdata.0.wallbox_enable', true, true);\r\n                this.wallboxAmpere = this.maxWallboxAmpere; // todo aufechte werte holen\r\n            } else {\r\n                this.log.debug('Set New Ampere to Wallbox: ' + tmpNewAmpere.toString());\r\n                this.setForeignStateAsync('0_userdata.0.wallbox_power', this.getWattFromAmpere(tmpNewAmpere), true);\r\n                this.setForeignStateAsync('0_userdata.0.wallbox_ampere', tmpNewAmpere, true);\r\n                this.setForeignStateAsync('0_userdata.0.wallbox_enable', true, true);\r\n                this.wallboxAmpere = tmpNewAmpere; // todo aufechte werte holen\r\n\r\n            }\r\n        } else {\r\n            // Haben zu wenig leistung, auf minumum gehen und stopTimer starten\r\n            if(this.wallboxAmpere != this.minWallboxAmpere) {\r\n                this.setForeignStateAsync('0_userdata.0.wallbox_power', this.getWattFromAmpere(this.minWallboxAmpere), true);\r\n                this.setForeignStateAsync('0_userdata.0.wallbox_ampere', this.minWallboxAmpere, true);\r\n                this.setForeignStateAsync('0_userdata.0.wallbox_enable', true, true);\r\n                this.wallboxAmpere = this.minWallboxAmpere; // todo aufechte werte holen\r\n            }\r\n            //stop all after timer\r\n            this.checkStopTimer();\r\n        }\r\n    }\r\n\r\n    private checkPvControl():void {\r\n        //Pr\u00FCfen ob das Auto bereit ist\r\n        if(this.isPluged && this.vehicleSoc < 100) {\r\n            this.log.debug('vehicle ready check PV Power');\r\n\r\n\r\n            //Sind wir im PV Modus?\r\n            if (this.mode == 'PV') {\r\n                //PV Modus - Laden das Auto dynamisch\r\n                //this.log.warn(((this.getAmpereFromWatt(this.currentPower)/this.stepAmpereWallbox) * this.stepAmpereWallbox).toString());\r\n                //this.log.warn((Math.floor(this.getAmpereFromWatt(this.currentPower)/this.stepAmpereWallbox) * this.stepAmpereWallbox).toString());\r\n                const tmpWallboxAmpere = Math.floor(this.getAmpereFromWatt(this.currentPower)/this.stepAmpereWallbox) * this.stepAmpereWallbox;\r\n\r\n                if(this.getAmpereFromWatt(this.currentPower) > this.stepAmpereWallbox) {\r\n                    // Haben gen\u00FCgend Energie f\u00FCr eine Wallboxstep\r\n                    this.log.debug('Have enough power - set Wallbox : ' + tmpWallboxAmpere.toString());\r\n                    this.setWallbox(tmpWallboxAmpere);\r\n                } else {\r\n                    // leider nicht gen\u00FCgend f\u00FCr ein Step - aber ist Netzbezug schon?\r\n                    if(this.currentPower < 0) {\r\n                        //Setze Wallbox niedriger\r\n                        this.log.debug('Have not enough power - set Wallbox down: ' + tmpWallboxAmpere.toString());\r\n                        this.setWallbox(tmpWallboxAmpere);\r\n                    } else {\r\n                        // Kein Netzbezug, k\u00F6nnen so laufen lassen\r\n                        this.log.debug('Have not enough power to increase wallbox');\r\n                    }\r\n                }\r\n            } else {\r\n                // Laden noch nicht - sind im Timer?\r\n                if(this.getAmpereFromWatt(this.currentPower) > this.minWallboxAmpere) {\r\n                    // Haben gen\u00FCgend Energie f\u00FCr eine Wallboxstep\r\n                    this.log.debug('Have enough power to start');\r\n                    this.checkStartTimer();\r\n                } else {\r\n                    // nicht gen\u00FCgend Energie, also wieder aus\r\n                    this.log.debug('Have not enough power');\r\n                    if (this.mode != 'stop') {\r\n                        this.checkStopTimer();\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.log.debug('vehicle not ready or full charged - stop all');\r\n            if(this.mode== 'PV') {\r\n                this.stopPV();\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkStartTimer(): void{\r\n        this.log.debug('check Start timer is ready');\r\n        if (this.runStopTimer) {\r\n            this.log.info('Stop Stoptimer - enough power');\r\n            clearTimeout(this.stopTimer)\r\n            this.runStopTimer = false ;\r\n        }\r\n        if(!this.runStartTimer) {\r\n            this.log.info('Start Starttimer - enough power');\r\n            this.startTimer = this.setTimeout(() => {\r\n                this.log.debug('Start timer finished');\r\n                this.startPV()\r\n                this.runStartTimer = false;\r\n            }, this.startTime);\r\n            this.runStartTimer = true;\r\n        }\r\n    }\r\n\r\n    private checkStopTimer(): void{\r\n        this.log.debug('check Stop timer is ready');\r\n        if (this.runStartTimer) {\r\n            this.log.info('Stop Starttimer - not enough power');\r\n            clearTimeout(this.startTimer)\r\n            this.runStartTimer = false;\r\n        }\r\n\r\n        if(!this.runStopTimer) {\r\n            this.log.info('Start Stoptimer - not enough power');\r\n            this.stopTimer = this.setTimeout(() => {\r\n                this.log.debug('Stop timer finished');\r\n                this.stopPV()\r\n                this.runStopTimer = false;\r\n            }, this.stopTime);\r\n            this.runStopTimer = true;\r\n        }\r\n    }\r\n\r\n    private startPV(): void {\r\n        this.mode= 'PV';\r\n    }\r\n\r\n    private stopPV(): void {\r\n        this.mode= 'stop';\r\n        // Stoppen Wallbox\r\n        this.setForeignStateAsync('0_userdata.0.wallbox_power', 0, true);\r\n        this.setForeignStateAsync('0_userdata.0.wallbox_ampere', 0, true);\r\n        this.setForeignStateAsync('0_userdata.0.wallbox_enable', false, true);\r\n        this.wallboxAmpere = 0; // todo aufechte werte holen\r\n    }\r\n\r\n    private getAmpereFromWatt(watt: number): number{\r\n        return watt/230;\r\n    }\r\n\r\n    private getWattFromAmpere(ampere: number): number {\r\n        return ampere * 230;\r\n    }\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new PvPowerConrol(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new PvPowerConrol())();\r\n}"],
  "mappings": "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",
  "names": []
}
